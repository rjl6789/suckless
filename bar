#!/bin/sh
#
# http://github.com/mitchweaver/bin
#
# bar for dwm
#
# shellcheck disable=SC2034
#

get_interface() {
    int=$(interface)
    printf '%s\n' "${int:-None}"
}


get_song() {
    song=$(song 2>/dev/null)
    case $song in
        ytsearch*|radio.html)
            song=loading...
    esac
    [ "$song" ] && printf '  [%s]' "$song"
}

get_ssid() {
    int=$(get_interface)
    case $int in
        eth*|enp*|enx*)
            essid=Wired
            ;;
        *)
read -r _ _ _ essid <<-EOF
$(iwconfig "$int" 2>/dev/null)
EOF
    esac
    case $essid in
        *':off/'*)
            ;;
        *)
            e=' '
            ssid=${essid%\"*}
            ssid=${ssid#*\"}
    esac
    printf '%s  %s' "${e:-❌}"  "${ssid:-No Internet}"

    case $int in
        wlan?|wlp*)
            # if a wireless interface, report the link quality
            printf ' (%s) ' "$(get_link_qual)"
    esac
}

get_link_qual() {
    int=$(get_interface)
    case $int in
        enp*|eth*) return 1
    esac

    iwconfig "$int" 2>/dev/null | \
    while read -r line ; do
        case $line in
            *'Link Quality'*)
                line=${line%/*}
                line=${line#*=}
                line=$((line * 100 / 70))
                printf '%s%%' $line
                break
        esac
    done
}

get_traffic() {
    int=$(get_interface)
    if [ -f "/sys/class/net/$int/statistics/rx_bytes" ] ; then
        read -r rx <"/sys/class/net/$int/statistics/rx_bytes"
        read -r tx <"/sys/class/net/$int/statistics/tx_bytes"
    fi
    printf '  %s   %s' \
        "$(printf '%s\n' "${rx:-0}" | human)" \
        "$(printf '%s\n' "${tx:-0}" | human)"
}

# Get memory information by parsing /proc/meminfo.
# Idea from pfetch, (dylan)
#
# Formula: MemUsed = MemTotal + Shmem - MemFree - Buffers - Cached - SReclaimable
# Source: https://github.com/KittyKatt/screenFetch/issues/386
#
# Only works on Linux.
get_mem() {
    # Parse the '/proc/meminfo' file splitting on ':' and 'k'.
    # The format of the file is 'key:   000kB' and an additional
    # split is used on 'k' to filter out 'kB'.
    while IFS=':k ' read -r key val _ ; do
        case $key in
            MemTotal|Shmem) used=$((used + val)) ;;
            MemFree|Buffers|Cached|SReclaimable) used=$((used - val))
        esac
    done </proc/meminfo

    printf ' %s' "$(printf '%s\n' "$((used * 1024))" | human)"
}

get_bat() {
    [ -f /sys/class/power_supply/$1/capacity ] || return 1
    read -r p </sys/class/power_supply/$1/capacity
    read -r s </sys/class/power_supply/AC/online
    case $s in
        1) e='' ;;
        0) case ${p%?} in
               [8-9]|10) e='  ' ;;
               [6-7]) e='  ' ;;
               [3-5]) e='  ' ;;
               [1-2]) e='  ' ;;
                   *) e='  '
           esac
    esac
    printf " $e  %s%%" "$p"
}

get_vol() {
    v=$(vol)
    case ${v%??} in
        [7-9]|10) e='' ;;
        [2-6]) e='' ;;
            *) e=''
    esac
    printf "$e %s" "$v"
}

drive_space() {
    df -h | while read -r drive size used avail mountpoint ; do
        case $drive in
            Filesystem*|/dev/loop*|tmpfs|*udev*)
                # dont report logical drives
                ;;
            *)
                case $mountpoint in
                    */boot*)
                        # dont report boot drives
                        ;;
                    *)
                        printf ' %s/%s ' "$used" "$avail"
                esac
        esac
    done
}

print_info() {
    # D=''
    # printf "%s$D[%s]$D[%s]$D[%s]$D[%s]$D[%s]$D[%s]$D[%s]$D[%s]\n" \
    # "$(a=$(get_song); [ "$a" ] && echo "[$a]")" \
    
    D='  '
    printf "%s$D%s$D %s %s$D%s\n" \
        "$(get_traffic)" \
        "$(get_mem)" \
        "$(get_bat BAT0) " \
        "$(get_bat BAT1) " \
        "$(date "+%a %d %I:%M %p") "
        #"$(get_ssid)" \
        #"$(get_song)" \
        #"$(get_crypto)" \
        #"$(get_vpn)" \
        #"$(drive_space)" \
        #"$(get_vol)" \
}

# get_temp() {
#     read t </sys/class/thermal/thermal_zone0/temp
#     printf '%s\n' "$t"
# }

case $1 in
    -d)
        trap 'xsetroot -name killed ; exit' INT TERM
        while sleep 5 ; do
            xsetroot -name "$(print_info)"
        done
        ;;
     *)
         print_info
esac
